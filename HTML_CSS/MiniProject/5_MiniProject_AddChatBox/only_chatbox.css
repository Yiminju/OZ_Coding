.chat-screen_texts{
    padding: 0;
    list-style-type: none;
}

.chat-screen_texts > .text{
    background-color: #ffffff;
    width: 280px;
    height: 50px;
    margin: 0 0 10px 0;
    padding: 10px;
    border-radius: 10px;
    line-height: 30px;
    position: relative;
    left: 20px;
    overflow: visible;
}

/*
.chat-screen_texts > .long{
    height: 80px;
}
=> 적용 안 됨
나중에 쓰인 .chat-screen_texts > .text_i 의 height: 50px 이 적용됨

하지만
.chat-screen_texts > li.long{
    height: 80px;
}
=> 적용됨
CSS 선택자의 우선순위는 '선택자를 얼마나 구체적으로 적었는가'에 따라서도 달라질 수 있음
따라서 .chat-screen_texts > li.long 를 사용한다면,
클래서 선택자 2개 + 요소 선택자(li) 1개 + 자식 선택자를 묶어서 사용한 것이 되기 때문에, 
.chat-screen_texts > .text_i 와 같이 2개의 클래스 선택자 + 1개의 자식 선택자가 결합된 선언문보다 더 높은 우선순위를 갖게 됨!
 */



.chat-screen_texts > .text::after{
    content: "";
    border-right: 16px solid #ffffff;  
    border-bottom: 16px solid transparent; 
    position: absolute;
    top: 10px;
    left: -10px;
}

.chat-screen_texts > .text_i{
    background-color: #ffffff;
    width: 280px;
    height: 50px;
    margin: 0 0 10px 0;
    padding: 10px;
    border-radius: 10px;
    line-height: 30px;
    position: relative;
    left: 394px;
}

/*
.chat-screen_texts > .long{
    height: 80px;
}
=> 적용됨
.chat-screen_texts > .text_i 와 같이 2개의 클래스 선택자 + 1개의 자식 선택자가 결합된 선언문과 마찬가지로 2개의 클래스 선택자와 + 1개의 자식 선택자가 결홥된 선언문이지만,
.chat-screen_texts > .text_i 보다 나중에 쓰였기 때문에 적용이 된다.
 */

 .chat-screen_texts > .long{
    height: 80px;
}

.chat-screen_texts > .text_i::after{
    content: "";
    border-left: 16px solid #ffffff;  
    border-top: 16px solid transparent; 
    position: absolute;
    top: 10px;
    right: -10px;
}

.chat-screen_texts > .text:hover,
.chat-screen_texts > .text_i:hover{
    background-color: #6891dd;
    transition: background-color 1.5s 0.1s ease-in;
}

.chat-screen_texts > .text:hover::after{
    border-right: 16px solid #6891dd;
    transition: border-right 1.5s 0.1s ease-in;
}

.chat-screen_texts > .text_i:hover::after{
    border-left: 16px solid #6891dd;
    transition: border-left 1.5s 0.1s ease-in;
}
